from selenium.common.exceptions import NoSuchElementException, ElementClickInterceptedException
from selenium import webdriver
import time
import pandas as pd
from datetime import datetime
# For whiting:
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


def get_jobs(keyword, num_jobs, verbose, path, slp_time, more_option):
    options = webdriver.ChromeOptions()
    options.add_argument("start-maximized")



    driver = webdriver.Chrome(executable_path=path, options=options)
    # driver.set_window_size(1320, 1100)

    url = "https://www.glassdoor.com/Job/jobs.htm?suggestCount=0&suggestChosen=false&clickSource=searchBtn&typedKeyword="+keyword+"&sc.keyword="+keyword+"&locT=&locId=&jobType="
    driver.get(url)
    jobs = []

    while len(jobs) < num_jobs:  #If true, should be still looking for new jobs.

        time.sleep(slp_time)

        try:
            driver.find_element_by_class_name("selected").click()
            print("  #  Selected was clicked  #  ")
        except ElementClickInterceptedException:
            print("#1.1")
            pass

        time.sleep(1)

        job_buttons = driver.find_elements_by_css_selector("a.jobLink")

        for job_button in job_buttons:
            print("Progress: {}".format("" + str(len(jobs)) + "/" + str(num_jobs)))
            if len(jobs) >= num_jobs:
                break

            job_button.click()  #You might
            time.sleep(1)
            collected_successfully = False

            try:
                driver.find_element_by_css_selector('[alt="Close"]').click() #clicking to the X.
                print('Close button clicked\n')
            except NoSuchElementException:
                # print('Close button NOT found')
                pass

            collected_successfully = False

            while not collected_successfully:

                try:
                    company_name = driver.find_element_by_css_selector("div[data-test='employerName']").text
                    print("Company name successfully collected")
                except:
                    print("! Failed to collect company name")
                    company_name = 'EMPTY'
                    time.sleep(3)

                try:
                    location = driver.find_element_by_css_selector("div[data-test='location']").text
                    print("Location successfully collected")
                except:
                    print("! Failed to collect location")
                    location = 'EMPTY'
                    time.sleep(3)

                try:
                    job_title = driver.find_element_by_css_selector("div[data-test='jobTitle']").text
                    print("Job title successfully collected")
                except:
                    print("! Failed to collect job title")
                    job_title = 'EMPTY'
                    time.sleep(3)

                try:
                    job_rating = driver.find_element_by_css_selector("span[data-test='detailRating']").text
                    print("Job rating successfully collected")
                except:
                    print("! Failed to collect job rating")
                    job_rating = 'EMPTY'
                    time.sleep(3)

                try:
                    salary_estimate = driver.find_element_by_css_selector("span[data-test='detailSalary']").text
                    print("Salary Estimate successfully collected")
                except NoSuchElementException:
                    print("! Failed to collect Salary Estimate")
                    salary_estimate = 0


                print("@@@@@@")
                collected_successfully = True

            # if  more option is True
            if more_option:
                try:
                    driver.find_element_by_xpath('.//div[@class="tab" and @data-tab-type="overview"]').click()

                    try:
                        headquarters = driver.find_element_by_xpath('.//div[@class="infoEntity"]//label[text()="Headquarters"]//following-sibling::*').text
                    except NoSuchElementException:
                        headquarters = -1

                    try:
                        size = driver.find_element_by_xpath('.//div[@class="infoEntity"]//label[text()="Size"]//following-sibling::*').text
                    except NoSuchElementException:
                        size = -1

                    try:
                        founded = driver.find_element_by_xpath('.//div[@class="infoEntity"]//label[text()="Founded"]//following-sibling::*').text
                    except NoSuchElementException:
                        founded = -1

                    try:
                        type_of_ownership = driver.find_element_by_xpath('.//div[@class="infoEntity"]//label[text()="Type"]//following-sibling::*').text
                    except NoSuchElementException:
                        type_of_ownership = -1

                    try:
                        industry = driver.find_element_by_xpath('.//div[@class="infoEntity"]//label[text()="Industry"]//following-sibling::*').text
                    except NoSuchElementException:
                        industry = -1

                    try:
                        sector = driver.find_element_by_xpath('.//div[@class="infoEntity"]//label[text()="Sector"]//following-sibling::*').text
                    except NoSuchElementException:
                        sector = -1

                    try:
                        revenue = driver.find_element_by_xpath('.//div[@class="infoEntity"]//label[text()="Revenue"]//following-sibling::*').text
                    except NoSuchElementException:
                        revenue = -1

                    try:
                        competitors = driver.find_element_by_xpath('.//div[@class="infoEntity"]//label[text()="Competitors"]//following-sibling::*').text
                    except NoSuchElementException:
                        competitors = -1
                except:
                    headquarters = -1
                    size = -1
                    founded = -1
                    type_of_ownership = -1
                    industry = -1
                    sector = -1
                    revenue = -1
                    competitors = -1

            #Printing for debugging
            if verbose:
                print("Job Title: {}".format(job_title))
                print("Salary Estimate: {}".format(salary_estimate))
                print("Rating: {}".format(job_rating))
                print("Company Name: {}".format(company_name))
                print("Location: {}".format(location))
                print("@@@@@@")


            #Printing for debugging
            if verbose and more_option:
                print("Headquarters: {}".format(headquarters))
                print("Size: {}".format(size))
                print("Founded: {}".format(founded))
                print("Type of Ownership: {}".format(type_of_ownership))
                print("Industry: {}".format(industry))
                print("Sector: {}".format(sector))
                print("Revenue: {}".format(revenue))
                print("Competitors: {}".format(competitors))
                # print("@@@@@@@@@")

            # craeting a time object for the csv file
            now = datetime.now()

            if more_option:
                jobs.append({"Job Title" : job_title,
                             "Salary Estimate" : salary_estimate,
                             "Rating" : job_rating,
                             "Company Name" : company_name,
                             "Location" : location,
                             "Headquarters" : headquarters,
                             "Size" : size,
                             "Founded" : founded,
                             "Type of ownership" : type_of_ownership,
                             "Industry" : industry,
                             "Sector" : sector,
                             "Revenue" : revenue,
                             "Competitors" : competitors,
                             "Time of Scrapt": now})


            elif not more_option:
                jobs.append({"Job Title" : job_title,
                             "Salary Estimate" : salary_estimate,
                             "Rating" : job_rating,
                             "Company Name" : company_name,
                             "Location" : location,
                             "Time of Scrapt": now})

        if num_jobs < len(jobs):
            try:
                next_button = driver.find_element_by_css_selector("button[data-direction='next']")
                next_button.click()
            except NoSuchElementException:
                print("Scraping terminated before reaching target number of jobs. Needed {}, got {}.".format(num_jobs, len(jobs)))
                break
        else: print("Scraping terminated seccusfuly! Needed {}, got {} :) ".format(num_jobs, len(jobs)))



    return pd.DataFrame(jobs)  #This line converts the dictionary object into a pandas DataFrame.


"""
                "Headquarters" : headquarters,
                "Size" : size,
                "Founded" : founded,
                "Type of ownership" : type_of_ownership,
                "Industry" : industry,
                "Sector" : sector,
                "Revenue" : revenue,
                "Competitors" : competitors,

"""